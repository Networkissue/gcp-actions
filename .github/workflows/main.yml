name: Deploy to App Engine

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (e.g., dev, qa)'
        required: true
        default: 'dev'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}  # This links to GitHub Environment (Settings > Environments) && dynamically changes the environments.

    steps:
      - name: Checkout or create dev branch
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
          git fetch origin
      
          if git ls-remote --exit-code --heads origin dev; then
            echo "Branch 'dev' exists. Checking it out..."
            git checkout dev
          else
            echo "Branch 'dev' does not exist. Creating it..."
            git checkout -b dev
            git pull origin main --no-rebase   # Ensure content is pulled into dev branch
            
            if [ -z "$(git status --porcelain)" ]; then  # Check if working directory is clean
              echo "# Dev branch initialized" >> README.md
              git add README.md
              git commit -m "chore: initialize dev branch"
            fi
            
            git push origin dev
          fi


      - name: Configure Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge origin/main into dev
        run: |
          git fetch origin main
          git merge origin/main --no-edit || echo "Merge skipped or completed with conflicts"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # - name: Install Dependencies
      #   run: npm install
      - name: Install dependencies for my-react-app-portal
        run: |
          cd ./my-react-app-portal  # navigate to the directory
          ls -alh  # List files to ensure package.json exists
          npm install
    
      - name: Install dependencies for my-node-app-service
        run: |
          cd ./my-node-app-service  # navigate to the directory
          ls -alh  # List files to ensure package.json exists
          npm install


      - name: Update version with timestamp for my-react-app-portal
        id: versioning-react-portal
        run: |
          cd my-react-app-portal  # navigate to the correct directory
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date -u +%Y%m%dT%H%M%S)
          NEW_VERSION="${VERSION%%+*}+$TIMESTAMP"
          node -e "let p=require('./package.json'); p.version='$NEW_VERSION'; require('fs').writeFileSync('package.json', JSON.stringify(p, null, 2))"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Update version with timestamp for my-react-app-portal
        id: versioning-node-service
        run: |
          cd my-node-app-service
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date -u +%Y%m%dT%H%M%S)
          NEW_VERSION="${VERSION%%+*}+$TIMESTAMP"
          node -e "let p=require('./package.json'); p.version='$NEW_VERSION'; require('fs').writeFileSync('package.json', JSON.stringify(p, null, 2))"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_DEV_KEY }}'  # Comes from GitHub Environment (dev, qa)
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: '${{ secrets.GCP_PROJECT_ID }}'

      # Step 4: Deploy Application using appdeployer.sh script
      - name: Deploy Application
        run: |
          chmod +x ./Installer/dev/appdeployerdev.sh  # Ensure script is executable
          ./Installer/dev/appdeployerdev.sh -v ${{ steps.versioning-react-portal.outputs.new_version }} -s "all"  # Pass the version from previous steps


      - name: Deploy to App Engine
        uses: google-github-actions/deploy-appengine@v2
        with:
          credentials_json: '{{ env.PROJECT_DEV }}'  # optionally map project_id by env
          deliverables: app.yaml
